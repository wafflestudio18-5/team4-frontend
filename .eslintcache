[{"C:\\team4-frontend\\src\\index.js":"1","C:\\team4-frontend\\src\\App.js":"2","C:\\team4-frontend\\src\\reportWebVitals.js":"3","C:\\team4-frontend\\src\\axios.ts":"4","C:\\team4-frontend\\src\\components\\User\\Me.js":"5","C:\\team4-frontend\\src\\components\\SearchResult\\SearchResults.js":"6","C:\\team4-frontend\\src\\components\\Main.js":"7","C:\\team4-frontend\\src\\components\\Questions\\QuestionList.js":"8","C:\\team4-frontend\\src\\components\\Questions\\QuestionItem.js":"9","C:\\team4-frontend\\src\\components\\Banner\\Header.js":"10","C:\\team4-frontend\\src\\components\\Button.js":"11"},{"size":498,"mtime":1609014403935,"results":"12","hashOfConfig":"13"},{"size":1323,"mtime":1609014405736,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1608555225236,"results":"15","hashOfConfig":"13"},{"size":12354,"mtime":1609014403919,"results":"16","hashOfConfig":"13"},{"size":2123,"mtime":1609014405703,"results":"17","hashOfConfig":"13"},{"size":13943,"mtime":1609014405706,"results":"18","hashOfConfig":"13"},{"size":1010,"mtime":1609014405725,"results":"19","hashOfConfig":"13"},{"size":321,"mtime":1608656891814,"results":"20","hashOfConfig":"13"},{"size":1976,"mtime":1609014403933,"results":"21","hashOfConfig":"13"},{"size":1978,"mtime":1609014405360,"results":"22","hashOfConfig":"13"},{"size":259,"mtime":1609014405391,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tjeqwi",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\team4-frontend\\src\\index.js",[],"C:\\team4-frontend\\src\\App.js",[],["51","52"],"C:\\team4-frontend\\src\\reportWebVitals.js",[],"C:\\team4-frontend\\src\\axios.ts",[],["53","54"],"C:\\team4-frontend\\src\\components\\User\\Me.js",["55","56","57","58"],"import React, {useState, useEffect} from 'react';\r\nimport {getUserMe} from '../../axios';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    useParams,\r\n    useRouteMatch\r\n  } from \"react-router-dom\";\r\nimport Activity from './Activity';\r\nimport Profile from './Profile';\r\nimport EditProfile from './EditProfile';\r\n//user는 나중에 context로 바꾸기\r\nconst Me = () => {\r\n    let history = useHistory();\r\n    let {tab} = useParams();\r\n    let match = useRouteMatch();\r\n    const [user, setUser] = useState({ \r\n        \"id\": 0,\r\n        \"username\": \"waffle\",\r\n        \"created_at\": 0,\r\n        \"updated_at\": 0,\r\n        \"email\": \"waffle@wafflestudio.com\",\r\n        \"last_login\": 0,\r\n        \"nickname\": \"waffl-e\",\r\n        \"picture\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/Waffles_with_Strawberries.jpg/1280px-Waffles_with_Strawberries.jpg\",\r\n        \"reputation\": 0,\r\n        \"question_count\": 1,\r\n        \"answer_count\":2,\r\n        \"bookmark_count\":3\r\n      });\r\n    useEffect(()=> {\r\n        //const userData = getUserMe()\r\n        //setUser(()=>userData)\r\n\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <h1>My page</h1>\r\n        <div className=\"activity-header\">\r\n        <div>\r\n        <button onClick={()=>{history.push('/users/me/profile')}}>Profile</button>\r\n        <button onClick={()=>{history.push('/users/me/activity')}}>Activity</button>\r\n        <button onClick={()=>{history.push('/users/me/edit')}}>Edit</button>\r\n        </div>\r\n        <div>\r\n        {user.nickname}\r\n        <img width=\"50px\" src={user.picture} alt=\"user img\"/>\r\n        </div>\r\n        <hr/>\r\n        </div>\r\n        <Switch>\r\n        {console.log(`${match.path}`)}\r\n        <Route exact path={`${match.path}`}>\r\n            <Activity user={user}/>\r\n        </Route>\r\n        <Route exact path={`${match.path}/profile`}>\r\n            <Profile user={user}/>\r\n        </Route>\r\n        <Route path={`${match.path}/activity`}>\r\n            <Activity user={user}/>\r\n        </Route>\r\n        <Route path={`${match.path}/edit`}>\r\n            <EditProfile user={user}/>\r\n        </Route>\r\n        {/*default*/} \r\n        </Switch>\r\n        </>\r\n    )\r\n}\r\nexport default Me;","C:\\team4-frontend\\src\\components\\SearchResult\\SearchResults.js",["59"],"import {useState, Fragement} from 'react'\r\nimport {getQuestionbyTag, getQuestionbyKwds, getUser} from '../../axios.ts'\r\nimport QuestionList from '../Questions/QuestionList'\r\nimport qs from 'qs';\r\n\r\n//tags: list of tags\r\nexport const SearchResultTags = ({location}) => {\r\n    const query = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true\r\n    });\r\n    console.log(query);\r\n    const [sort, setSort] = useState(query.sorted_by)\r\n    const [page, setPage] = useState(parseInt(query.page))\r\n    const [filter_by, setFilter] = query.hasOwnProperty(\"filter_by\")? query.filter_by : null\r\n    const tags_form = query.tags\r\n    let result = filter_by === null? getQuestionbyTag(tags_form, sort, page) : getQuestionbyTag(filter_by,tags_form, sort, page)\r\n    const max_page = Math.ceil(result.questions.count()/30)\r\n\r\n    const Refresh = () => {\r\n        //TODO: 값 확인하기 (refresh 필요 있나)\r\n        result = getQuestionbyTag(tags_form, sort, page)\r\n    }\r\n    \r\n    const changeSort = (n_sort) => {\r\n        setSort(n_sort)\r\n        Refresh()\r\n    }\r\n\r\n    const changePage = (n_page) => {\r\n        setPage(n_page)\r\n        Refresh()\r\n    }\r\n\r\n    \r\n    return (\r\n        <Fragement className=\"search-result-tags-box\">\r\n            <div className=\"search-result-head\">\r\n                <div className=\"search-result-top\">\r\n                    <div className=\"search-result-title\">\r\n                        Search Results\r\n                    </div>\r\n                    <div className=\"search-result-top-right-box\">\r\n                        <div className=\"advanced-tip-box\" /*TODO: <a> tag*/>\r\n                            Advanced Question\r\n                        </div>\r\n                        <div className=\"ask-q-box\">\r\n                            <button className=\"ask-q-btn\" /*TODO: pnClick*/></button>\r\n                        </div>\r\n                    </div>                \r\n                </div>\r\n                <div className=\"result-head-sub\">\r\n                    Results for tags {tags_form}\r\n                </div>\r\n            </div>\r\n            <div className=\"search-result-body\">\r\n                    <div className=\"result-body\">\r\n                        <div className=\"search-bar-box\">\r\n                            <div className=\"search-input\">\r\n                                <input placeholder=\"input keywords/tags\"/>\r\n                            </div>\r\n                            <div className=\"search-btn-box\">\r\n                                <button className=\"search-btn\" /*TODO: 나중에 tags, keywords 합칠 거라서 아직 구현 안함*/>Search</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"results-info-box\">\r\n                            <div className=\"results-num-box\">\r\n                                {result.questions.count()} results\r\n                            </div>\r\n                            <div className=\"sort-btn-box\" /*TODO: 두 개는 dropdown?*/>\r\n                                <div className=\"sort-newest\">\r\n                                    <button className=\"new-btn\" onClick = {() => changeSort(\"newest\")}>new</button>\r\n                                </div>\r\n                                <div className=\"sort-update\">\r\n                                    <button className=\"update-btn\" onClick = {() => changeSort(\"recent_activity\")}>update</button>\r\n                                </div>\r\n                                <div className=\"sort-votes\">\r\n                                    <button className=\"vote-btn\" onClick = {() => changeSort(\"most_votes\")}>votes</button>\r\n                                </div>\r\n                                <div className=\"sort-views\">\r\n                                    <button className=\"view-btn\" onClick = {() => changeSort(\"most_frequent\")}>views</button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"filter_select-box\">\r\n                                <div className=\"filter-no-answer\">\r\n                                    <button onClick={() => {setFilter(\"no_answer\")}}>no answer</button>\r\n                                </div>\r\n                                <div className=\"filter-no_accepted_answer\">\r\n                                    <button onClick={() => {setFilter(\"no_accepted_answer\")}}>no accepted answer</button>\r\n                                </div>\r\n                                <div className=\"filter-none\">\r\n                                    <button onClick={() => {setFilter(null)}}>no filters</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <QuestionList Questions={result.questions}/>\r\n            <div className=\"select-page-box\">\r\n                <div className=\"page-plus-btn-box\">\r\n                    <button className=\"page-plus-btn\" onClick = {() => {changePage(page===max_page? max_page : page+1)}}>next page</button>\r\n                </div>\r\n                {page}\r\n                <div className=\"page-minus-btn-box\">\r\n                    <button className=\"page-minus-btn\" onClick = {() => {changePage(page===1? 1 : page-1)}}>prev page</button>\r\n                </div>\r\n            </div>\r\n        </Fragement>\r\n    )\r\n    \r\n}\r\n\r\n//kwds: list of keywords\r\nexport const    SearchResultKwds = ({location}) => {\r\n    const query = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true\r\n    });\r\n    const [sort, setSort] = query.sorted_by\r\n    const [page, setPage] = query.page\r\n    const keywords_form = query.kwds\r\n    const [result, setResult] = useState(getQuestionbyKwds(keywords_form, sort, page))\r\n    const [filter_by, setFilter] = query.hasOwnProperty(\"filter_by\")? query.filter_by : null\r\n    const max_page = result.questions.count()/30\r\n\r\n    const Refresh = () => {\r\n        setResult(getQuestionbyKwds(keywords_form, filter_by, sort, page))\r\n    }\r\n    \r\n    const changeSort = (n_sort) => {\r\n        setSort(n_sort)\r\n        Refresh()\r\n    }\r\n\r\n    const changePage = (n_page) => {\r\n        setPage(n_page)\r\n        Refresh()\r\n    }\r\n\r\n\r\n\r\n    \r\n    return (\r\n        <Fragement className=\"search-result-kwds-box\">\r\n            <div className=\"search-result-head\">\r\n                <div className=\"search-result-top\">\r\n                    <div className=\"search-result-title\">\r\n                        Search Results\r\n                    </div>\r\n                    <div className=\"search-result-top-right-box\">\r\n                        <div className=\"advanced-tip-box\" /*TODO: <a> tag*/>\r\n                            Advanced Question\r\n                        </div>\r\n                        <div className=\"ask-q-box\">\r\n                            <button className=\"ask-q-btn\" /*TODO: pnClick*/></button>\r\n                        </div>\r\n                    </div>                \r\n                </div>\r\n                <div className=\"result-head-sub\">\r\n                    Results for keywords {keywords_form}\r\n                </div>\r\n            </div>\r\n            <div className=\"search-result-body\">\r\n                    <div className=\"result-body\">\r\n                        <div className=\"search-bar-box\">\r\n                            <div className=\"search-input\">\r\n                                <input placeholder=\"input keywords/tags\"/>\r\n                            </div>\r\n                            <div className=\"search-btn-box\">\r\n                                <button className=\"search-btn\" /*TODO: 나중에 tags, keywords 합칠 거라서 아직 구현 안함*/>Search</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"results-info-box\">\r\n                            <div className=\"results-num-box\">\r\n                                {result.questions.count()} results\r\n                            </div>\r\n                            <div className=\"sort-btn-box\" /*TODO: 두 개는 dropdown?*/>\r\n                                <div className=\"sort-newest\">\r\n                                    <button className=\"new-btn\" onClick = {() => changeSort(\"newest\")}>new</button>\r\n                                </div>\r\n                                <div className=\"sort-update\">\r\n                                    <button className=\"update-btn\" onClick = {() => changeSort(\"recent_activity\")}>update</button>\r\n                                </div>\r\n                                <div className=\"sort-votes\">\r\n                                    <button className=\"vote-btn\" onClick = {() => changeSort(\"most_votes\")}>votes</button>\r\n                                </div>\r\n                                <div className=\"sort-views\">\r\n                                    <button className=\"view-btn\" onClick = {() => changeSort(\"most_frequent\")}>views</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <QuestionList Questions={result.questions}/>\r\n            <div className=\"select-page-box\">\r\n                <div className=\"page-plus-btn-box\">\r\n                    <button className=\"page-plus-btn\" onClick = {() => {changePage(page===max_page? max_page : page+1)}}>next page</button>\r\n                </div>\r\n                {page}\r\n                <div className=\"page-minus-btn-box\">\r\n                    <button className=\"page-minus-btn\" onClick = {() => {changePage(page===1? 1 : page-1)}}>prev page</button>\r\n                </div>\r\n            </div>\r\n        </Fragement>\r\n    )\r\n    \r\n}\r\n\r\n//user_id\r\nexport const SearchResultUser = (match) => {\r\n    console.log(match);\r\n    const {user_id} = match.match.params\r\n    console.log(\"id :\"+ user_id);\r\n    const user = getUser(user_id)\r\n    const [sort, setSort] = useState(\"newest\")\r\n    const [page, setPage] = useState(1)\r\n    const [result, setResult] = useState(getQuestionbyKwds(user_id, sort, page))\r\n    console.log(result);\r\n    const max_page = result.questions.count()/30\r\n\r\n    const Refresh = () => {\r\n        setResult(getQuestionbyKwds(user_id, sort, page))\r\n    }\r\n    \r\n    const changeSort = (n_sort) => {\r\n        setSort(n_sort)\r\n        Refresh()\r\n    }\r\n\r\n    const changePage = (n_page) => {\r\n        setPage(n_page)\r\n        Refresh()\r\n    }\r\n\r\n\r\n\r\n    \r\n    return (\r\n        <Fragement className=\"search-result-kwds-box\">\r\n            <div className=\"search-result-head\">\r\n                <div className=\"search-result-top\">\r\n                    <div className=\"search-result-title\">\r\n                        Search Results\r\n                    </div>\r\n                    <div className=\"search-result-top-right-box\">\r\n                        <div className=\"advanced-tip-box\" /*TODO: <a> tag*/>\r\n                            Advanced Question\r\n                        </div>\r\n                        <div className=\"ask-q-box\">\r\n                            <button className=\"ask-q-btn\" /*TODO: pnClick*/></button>\r\n                        </div>\r\n                    </div>                \r\n                </div>\r\n                <div className=\"result-head-sub\">\r\n                    Results for user {user.username}\r\n                </div>\r\n            </div>\r\n            <div className=\"search-result-body\">\r\n                    <div className=\"result-body\">\r\n                        <div className=\"search-bar-box\">\r\n                            <div className=\"search-input\">\r\n                                <input placeholder=\"input keywords/tags\"/>\r\n                            </div>\r\n                            <div className=\"search-btn-box\">\r\n                                <button className=\"search-btn\" /*TODO: 나중에 tags, keywords 합칠 거라서 아직 구현 안함*/>Search</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"results-info-box\">\r\n                            <div className=\"results-num-box\">\r\n                                {result.questions.count()} results\r\n                            </div>\r\n                            <div className=\"sort-btn-box\" /*TODO: 두 개는 dropdown?*/>\r\n                                <div className=\"sort-newest\">\r\n                                    <button className=\"new-btn\" onClick = {() => changeSort(\"newest\")}>new</button>\r\n                                </div>\r\n                                <div className=\"sort-update\">\r\n                                    <button className=\"update-btn\" onClick = {() => changeSort(\"recent_activity\")}>update</button>\r\n                                </div>\r\n                                <div className=\"sort-votes\">\r\n                                    <button className=\"vote-btn\" onClick = {() => changeSort(\"most_votes\")}>votes</button>\r\n                                </div>\r\n                                <div className=\"sort-views\">\r\n                                    <button className=\"view-btn\" onClick = {() => changeSort(\"most_frequent\")}>views</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            <QuestionList Questions={result.questions}/>\r\n            <div className=\"select-page-box\">\r\n                <div className=\"page-plus-btn-box\">\r\n                    <button className=\"page-plus-btn\" onClick = {() => {changePage(page===max_page? max_page : page+1)}}>next page</button>\r\n                </div>\r\n                {page}\r\n                <div className=\"page-minus-btn-box\">\r\n                    <button className=\"page-minus-btn\" onClick = {() => {changePage(page===1? 1 : page-1)}}>prev page</button>\r\n                </div>\r\n            </div>\r\n        </Fragement>\r\n    )\r\n    \r\n}","C:\\team4-frontend\\src\\components\\Main.js",["60"],"import {Fragment} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n//The Main Page needs many Components : TopBar, List of Questions, ...etc\r\nconst Main = () => {\r\n    return(\r\n        <Fragment> \r\n            <h1 className=\"main-title-box\" style={{'text-align':'center'}}>\r\n                Wafflow는 와플스튜디오의 핵심적인 아카이브 서비스입니다. \r\n            </h1>\r\n            <h3 className=\"main-subtitle\" style={{'text-align':'center'}}>\r\n                풍부한 가능성, 신뢰할 수 있는 네트워크\r\n            </h3>\r\n            <div style={{'text-align':'center'}}>\r\n                 <img src=\"https://www.cuisinart.com/globalassets/recipes/recipe_6135_13606779\" alt=\"waffle\" align=\"center\"/>\r\n            </div>\r\n            <br></br>\r\n           \r\n            <h3 style={{'text-align':'center'}}>\r\n                지금 Wafflow와 함께히세요\r\n            </h3> \r\n            <Link to=\"/\">to Main Page</Link>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Main","C:\\team4-frontend\\src\\components\\Questions\\QuestionList.js",[],"C:\\team4-frontend\\src\\components\\Questions\\QuestionItem.js",[],"C:\\team4-frontend\\src\\components\\Banner\\Header.js",["61","62","63","64"],"C:\\team4-frontend\\src\\components\\Button.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":9,"nodeType":"71","messageId":"72","endLine":2,"endColumn":18},{"ruleId":"69","severity":1,"message":"73","line":5,"column":22,"nodeType":"71","messageId":"72","endLine":5,"endColumn":28},{"ruleId":"69","severity":1,"message":"74","line":17,"column":10,"nodeType":"71","messageId":"72","endLine":17,"endColumn":13},{"ruleId":"69","severity":1,"message":"75","line":19,"column":18,"nodeType":"71","messageId":"72","endLine":19,"endColumn":25},{"ruleId":"69","severity":1,"message":"76","line":121,"column":23,"nodeType":"71","messageId":"72","endLine":121,"endColumn":32},{"ruleId":"69","severity":1,"message":"77","line":2,"column":9,"nodeType":"71","messageId":"72","endLine":2,"endColumn":13},{"ruleId":"69","severity":1,"message":"78","line":2,"column":9,"nodeType":"71","messageId":"72","endLine":2,"endColumn":26},{"ruleId":"69","severity":1,"message":"79","line":11,"column":12,"nodeType":"71","messageId":"72","endLine":11,"endColumn":16},{"ruleId":"69","severity":1,"message":"75","line":11,"column":18,"nodeType":"71","messageId":"72","endLine":11,"endColumn":25},{"ruleId":"69","severity":1,"message":"80","line":28,"column":11,"nodeType":"71","messageId":"72","endLine":28,"endColumn":17},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'getUserMe' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'tab' is assigned a value but never used.","'setUser' is assigned a value but never used.","'setFilter' is assigned a value but never used.","'Link' is defined but never used.","'getQuestionbyKwds' is defined but never used.","'user' is assigned a value but never used.","'search' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]